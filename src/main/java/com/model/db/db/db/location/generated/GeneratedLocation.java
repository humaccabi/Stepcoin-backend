package com.model.db.db.db.location.generated;

import com.model.db.db.db.location.Location;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import java.util.Optional;
import javax.annotation.Generated;

/**
 * The generated base for the {@link
 * com.model.db.db.db.location.Location}-interface representing entities of the
 * {@code location}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface GeneratedLocation {
    
    /**
     * This Field corresponds to the {@link Location} field that can be obtained
     * using the {@link Location#getId()} method.
     */
    final IntField<Location, Integer> ID = IntField.create(
        Identifier.ID,
        Location::getId,
        Location::setId,
        TypeMapper.primitive(), 
        true
    );
    /**
     * This Field corresponds to the {@link Location} field that can be obtained
     * using the {@link Location#getLatitude()} method.
     */
    final StringField<Location, String> LATITUDE = StringField.create(
        Identifier.LATITUDE,
        Location::getLatitude,
        Location::setLatitude,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Location} field that can be obtained
     * using the {@link Location#getLongitude()} method.
     */
    final StringField<Location, String> LONGITUDE = StringField.create(
        Identifier.LONGITUDE,
        Location::getLongitude,
        Location::setLongitude,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Location} field that can be obtained
     * using the {@link Location#getAddress()} method.
     */
    final StringField<Location, String> ADDRESS = StringField.create(
        Identifier.ADDRESS,
        o -> OptionalUtil.unwrap(o.getAddress()),
        Location::setAddress,
        TypeMapper.identity(), 
        false
    );
    
    /**
     * Returns the id of this Location. The id field corresponds to the database
     * column db.db.location.id.
     * 
     * @return the id of this Location
     */
    int getId();
    
    /**
     * Returns the latitude of this Location. The latitude field corresponds to
     * the database column db.db.location.latitude.
     * 
     * @return the latitude of this Location
     */
    String getLatitude();
    
    /**
     * Returns the longitude of this Location. The longitude field corresponds
     * to the database column db.db.location.longitude.
     * 
     * @return the longitude of this Location
     */
    String getLongitude();
    
    /**
     * Returns the address of this Location. The address field corresponds to
     * the database column db.db.location.address.
     * 
     * @return the address of this Location
     */
    Optional<String> getAddress();
    
    /**
     * Sets the id of this Location. The id field corresponds to the database
     * column db.db.location.id.
     * 
     * @param id to set of this Location
     * @return   this Location instance
     */
    Location setId(int id);
    
    /**
     * Sets the latitude of this Location. The latitude field corresponds to the
     * database column db.db.location.latitude.
     * 
     * @param latitude to set of this Location
     * @return         this Location instance
     */
    Location setLatitude(String latitude);
    
    /**
     * Sets the longitude of this Location. The longitude field corresponds to
     * the database column db.db.location.longitude.
     * 
     * @param longitude to set of this Location
     * @return          this Location instance
     */
    Location setLongitude(String longitude);
    
    /**
     * Sets the address of this Location. The address field corresponds to the
     * database column db.db.location.address.
     * 
     * @param address to set of this Location
     * @return        this Location instance
     */
    Location setAddress(String address);
    
    enum Identifier implements ColumnIdentifier<Location> {
        
        ID ("id"),
        LATITUDE ("latitude"),
        LONGITUDE ("longitude"),
        ADDRESS ("address");
        
        private final String columnName;
        private final TableIdentifier<Location> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName = columnName;
            this.tableIdentifier = TableIdentifier.of(getDbmsName(), getSchemaName(), getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "db";
        }
        
        @Override
        public String getSchemaName() {
            return "db";
        }
        
        @Override
        public String getTableName() {
            return "location";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<Location> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}