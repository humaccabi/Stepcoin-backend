package com.model.db.db.db.coin.generated;

import com.model.db.db.db.coin.Coin;
import com.model.db.db.db.location.Location;
import com.model.db.db.db.store.Store;
import com.model.db.db.db.user.User;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;
import javax.annotation.Generated;

/**
 * The generated base implementation of the {@link
 * com.model.db.db.db.coin.Coin}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedCoinImpl implements Coin {
    
    private int id;
    private String value;
    private String enabled;
    private String startDate;
    private String endDate;
    private String taken;
    private String takenDate;
    private Timestamp createTime;
    private int storeId;
    private int locationId;
    private Integer userId;
    
    protected GeneratedCoinImpl() {
        
    }
    
    @Override
    public int getId() {
        return id;
    }
    
    @Override
    public Optional<String> getValue() {
        return Optional.ofNullable(value);
    }
    
    @Override
    public Optional<String> getEnabled() {
        return Optional.ofNullable(enabled);
    }
    
    @Override
    public Optional<String> getStartDate() {
        return Optional.ofNullable(startDate);
    }
    
    @Override
    public Optional<String> getEndDate() {
        return Optional.ofNullable(endDate);
    }
    
    @Override
    public Optional<String> getTaken() {
        return Optional.ofNullable(taken);
    }
    
    @Override
    public Optional<String> getTakenDate() {
        return Optional.ofNullable(takenDate);
    }
    
    @Override
    public Optional<Timestamp> getCreateTime() {
        return Optional.ofNullable(createTime);
    }
    
    @Override
    public int getStoreId() {
        return storeId;
    }
    
    @Override
    public int getLocationId() {
        return locationId;
    }
    
    @Override
    public OptionalInt getUserId() {
        return OptionalUtil.ofNullable(userId);
    }
    
    @Override
    public Coin setId(int id) {
        this.id = id;
        return this;
    }
    
    @Override
    public Coin setValue(String value) {
        this.value = value;
        return this;
    }
    
    @Override
    public Coin setEnabled(String enabled) {
        this.enabled = enabled;
        return this;
    }
    
    @Override
    public Coin setStartDate(String startDate) {
        this.startDate = startDate;
        return this;
    }
    
    @Override
    public Coin setEndDate(String endDate) {
        this.endDate = endDate;
        return this;
    }
    
    @Override
    public Coin setTaken(String taken) {
        this.taken = taken;
        return this;
    }
    
    @Override
    public Coin setTakenDate(String takenDate) {
        this.takenDate = takenDate;
        return this;
    }
    
    @Override
    public Coin setCreateTime(Timestamp createTime) {
        this.createTime = createTime;
        return this;
    }
    
    @Override
    public Coin setStoreId(int storeId) {
        this.storeId = storeId;
        return this;
    }
    
    @Override
    public Coin setLocationId(int locationId) {
        this.locationId = locationId;
        return this;
    }
    
    @Override
    public Coin setUserId(Integer userId) {
        this.userId = userId;
        return this;
    }
    
    @Override
    public Store findStoreId(Manager<Store> foreignManager) {
        return foreignManager.stream().filter(Store.ID.equal(getStoreId())).findAny().orElse(null);
    }
    
    @Override
    public Location findLocationId(Manager<Location> foreignManager) {
        return foreignManager.stream().filter(Location.ID.equal(getLocationId())).findAny().orElse(null);
    }
    
    @Override
    public Optional<User> findUserId(Manager<User> foreignManager) {
        if (getUserId().isPresent()) {
            return foreignManager.stream().filter(User.ID.equal(getUserId().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = " + Objects.toString(getId()));
        sj.add("value = " + Objects.toString(OptionalUtil.unwrap(getValue())));
        sj.add("enabled = " + Objects.toString(OptionalUtil.unwrap(getEnabled())));
        sj.add("startDate = " + Objects.toString(OptionalUtil.unwrap(getStartDate())));
        sj.add("endDate = " + Objects.toString(OptionalUtil.unwrap(getEndDate())));
        sj.add("taken = " + Objects.toString(OptionalUtil.unwrap(getTaken())));
        sj.add("takenDate = " + Objects.toString(OptionalUtil.unwrap(getTakenDate())));
        sj.add("createTime = " + Objects.toString(OptionalUtil.unwrap(getCreateTime())));
        sj.add("storeId = " + Objects.toString(getStoreId()));
        sj.add("locationId = " + Objects.toString(getLocationId()));
        sj.add("userId = " + Objects.toString(OptionalUtil.unwrap(getUserId())));
        return "CoinImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Coin)) { return false; }
        final Coin thatCoin = (Coin)that;
        if (this.getId() != thatCoin.getId()) {return false; }
        if (!Objects.equals(this.getValue(), thatCoin.getValue())) {return false; }
        if (!Objects.equals(this.getEnabled(), thatCoin.getEnabled())) {return false; }
        if (!Objects.equals(this.getStartDate(), thatCoin.getStartDate())) {return false; }
        if (!Objects.equals(this.getEndDate(), thatCoin.getEndDate())) {return false; }
        if (!Objects.equals(this.getTaken(), thatCoin.getTaken())) {return false; }
        if (!Objects.equals(this.getTakenDate(), thatCoin.getTakenDate())) {return false; }
        if (!Objects.equals(this.getCreateTime(), thatCoin.getCreateTime())) {return false; }
        if (this.getStoreId() != thatCoin.getStoreId()) {return false; }
        if (this.getLocationId() != thatCoin.getLocationId()) {return false; }
        if (!Objects.equals(this.getUserId(), thatCoin.getUserId())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(getValue());
        hash = 31 * hash + Objects.hashCode(getEnabled());
        hash = 31 * hash + Objects.hashCode(getStartDate());
        hash = 31 * hash + Objects.hashCode(getEndDate());
        hash = 31 * hash + Objects.hashCode(getTaken());
        hash = 31 * hash + Objects.hashCode(getTakenDate());
        hash = 31 * hash + Objects.hashCode(getCreateTime());
        hash = 31 * hash + Integer.hashCode(getStoreId());
        hash = 31 * hash + Integer.hashCode(getLocationId());
        hash = 31 * hash + Objects.hashCode(getUserId());
        return hash;
    }
}