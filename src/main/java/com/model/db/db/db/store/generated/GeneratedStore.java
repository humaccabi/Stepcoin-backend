package com.model.db.db.db.store.generated;

import com.model.db.db.db.business_user.BusinessUser;
import com.model.db.db.db.location.Location;
import com.model.db.db.db.store.Store;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.IntForeignKeyField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import java.util.Optional;
import javax.annotation.Generated;

/**
 * The generated base for the {@link com.model.db.db.db.store.Store}-interface
 * representing entities of the {@code store}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface GeneratedStore {
    
    /**
     * This Field corresponds to the {@link Store} field that can be obtained
     * using the {@link Store#getId()} method.
     */
    final IntField<Store, Integer> ID = IntField.create(
        Identifier.ID,
        Store::getId,
        Store::setId,
        TypeMapper.primitive(), 
        true
    );
    /**
     * This Field corresponds to the {@link Store} field that can be obtained
     * using the {@link Store#getCity()} method.
     */
    final StringField<Store, String> CITY = StringField.create(
        Identifier.CITY,
        o -> OptionalUtil.unwrap(o.getCity()),
        Store::setCity,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Store} field that can be obtained
     * using the {@link Store#getName()} method.
     */
    final StringField<Store, String> NAME = StringField.create(
        Identifier.NAME,
        o -> OptionalUtil.unwrap(o.getName()),
        Store::setName,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Store} field that can be obtained
     * using the {@link Store#getBusinessUserId()} method.
     */
    final IntForeignKeyField<Store, Integer, BusinessUser> BUSINESS_USER_ID = IntForeignKeyField.create(
        Identifier.BUSINESS_USER_ID,
        Store::getBusinessUserId,
        Store::setBusinessUserId,
        BusinessUser.ID,
        TypeMapper.primitive(), 
        false
    );
    /**
     * This Field corresponds to the {@link Store} field that can be obtained
     * using the {@link Store#getLocationId()} method.
     */
    final IntForeignKeyField<Store, Integer, Location> LOCATION_ID = IntForeignKeyField.create(
        Identifier.LOCATION_ID,
        Store::getLocationId,
        Store::setLocationId,
        Location.ID,
        TypeMapper.primitive(), 
        false
    );
    /**
     * This Field corresponds to the {@link Store} field that can be obtained
     * using the {@link Store#getLogo()} method.
     */
    final StringField<Store, String> LOGO = StringField.create(
        Identifier.LOGO,
        o -> OptionalUtil.unwrap(o.getLogo()),
        Store::setLogo,
        TypeMapper.identity(), 
        false
    );
    
    /**
     * Returns the id of this Store. The id field corresponds to the database
     * column db.db.store.id.
     * 
     * @return the id of this Store
     */
    int getId();
    
    /**
     * Returns the city of this Store. The city field corresponds to the
     * database column db.db.store.city.
     * 
     * @return the city of this Store
     */
    Optional<String> getCity();
    
    /**
     * Returns the name of this Store. The name field corresponds to the
     * database column db.db.store.name.
     * 
     * @return the name of this Store
     */
    Optional<String> getName();
    
    /**
     * Returns the businessUserId of this Store. The businessUserId field
     * corresponds to the database column db.db.store.business_user_id.
     * 
     * @return the businessUserId of this Store
     */
    int getBusinessUserId();
    
    /**
     * Returns the locationId of this Store. The locationId field corresponds to
     * the database column db.db.store.location_id.
     * 
     * @return the locationId of this Store
     */
    int getLocationId();
    
    /**
     * Returns the logo of this Store. The logo field corresponds to the
     * database column db.db.store.logo.
     * 
     * @return the logo of this Store
     */
    Optional<String> getLogo();
    
    /**
     * Sets the id of this Store. The id field corresponds to the database
     * column db.db.store.id.
     * 
     * @param id to set of this Store
     * @return   this Store instance
     */
    Store setId(int id);
    
    /**
     * Sets the city of this Store. The city field corresponds to the database
     * column db.db.store.city.
     * 
     * @param city to set of this Store
     * @return     this Store instance
     */
    Store setCity(String city);
    
    /**
     * Sets the name of this Store. The name field corresponds to the database
     * column db.db.store.name.
     * 
     * @param name to set of this Store
     * @return     this Store instance
     */
    Store setName(String name);
    
    /**
     * Sets the businessUserId of this Store. The businessUserId field
     * corresponds to the database column db.db.store.business_user_id.
     * 
     * @param businessUserId to set of this Store
     * @return               this Store instance
     */
    Store setBusinessUserId(int businessUserId);
    
    /**
     * Sets the locationId of this Store. The locationId field corresponds to
     * the database column db.db.store.location_id.
     * 
     * @param locationId to set of this Store
     * @return           this Store instance
     */
    Store setLocationId(int locationId);
    
    /**
     * Sets the logo of this Store. The logo field corresponds to the database
     * column db.db.store.logo.
     * 
     * @param logo to set of this Store
     * @return     this Store instance
     */
    Store setLogo(String logo);
    
    /**
     * Queries the specified manager for the referenced BusinessUser. If no such
     * BusinessUser exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    BusinessUser findBusinessUserId(Manager<BusinessUser> foreignManager);
    
    /**
     * Queries the specified manager for the referenced Location. If no such
     * Location exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Location findLocationId(Manager<Location> foreignManager);
    
    enum Identifier implements ColumnIdentifier<Store> {
        
        ID ("id"),
        CITY ("city"),
        NAME ("name"),
        BUSINESS_USER_ID ("business_user_id"),
        LOCATION_ID ("location_id"),
        LOGO ("logo");
        
        private final String columnName;
        private final TableIdentifier<Store> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName = columnName;
            this.tableIdentifier = TableIdentifier.of(getDbmsName(), getSchemaName(), getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "db";
        }
        
        @Override
        public String getSchemaName() {
            return "db";
        }
        
        @Override
        public String getTableName() {
            return "store";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<Store> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}