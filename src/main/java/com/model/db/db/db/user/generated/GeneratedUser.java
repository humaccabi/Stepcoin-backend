package com.model.db.db.db.user.generated;

import com.model.db.db.db.user.User;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import java.sql.Timestamp;
import java.util.Optional;
import javax.annotation.Generated;

/**
 * The generated base for the {@link com.model.db.db.db.user.User}-interface
 * representing entities of the {@code user}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface GeneratedUser {
    
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getId()} method.
     */
    final IntField<User, Integer> ID = IntField.create(
        Identifier.ID,
        User::getId,
        User::setId,
        TypeMapper.primitive(), 
        true
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getEmail()} method.
     */
    final StringField<User, String> EMAIL = StringField.create(
        Identifier.EMAIL,
        o -> OptionalUtil.unwrap(o.getEmail()),
        User::setEmail,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getPassword()} method.
     */
    final StringField<User, String> PASSWORD = StringField.create(
        Identifier.PASSWORD,
        o -> OptionalUtil.unwrap(o.getPassword()),
        User::setPassword,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getPhoneNumber()} method.
     */
    final StringField<User, String> PHONE_NUMBER = StringField.create(
        Identifier.PHONE_NUMBER,
        o -> OptionalUtil.unwrap(o.getPhoneNumber()),
        User::setPhoneNumber,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getCredits()} method.
     */
    final StringField<User, String> CREDITS = StringField.create(
        Identifier.CREDITS,
        o -> OptionalUtil.unwrap(o.getCredits()),
        User::setCredits,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getCreateTime()} method.
     */
    final ComparableField<User, Timestamp, Timestamp> CREATE_TIME = ComparableField.create(
        Identifier.CREATE_TIME,
        o -> OptionalUtil.unwrap(o.getCreateTime()),
        User::setCreateTime,
        TypeMapper.identity(), 
        false
    );
    
    /**
     * Returns the id of this User. The id field corresponds to the database
     * column db.db.user.id.
     * 
     * @return the id of this User
     */
    int getId();
    
    /**
     * Returns the email of this User. The email field corresponds to the
     * database column db.db.user.email.
     * 
     * @return the email of this User
     */
    Optional<String> getEmail();
    
    /**
     * Returns the password of this User. The password field corresponds to the
     * database column db.db.user.password.
     * 
     * @return the password of this User
     */
    Optional<String> getPassword();
    
    /**
     * Returns the phoneNumber of this User. The phoneNumber field corresponds
     * to the database column db.db.user.phoneNumber.
     * 
     * @return the phoneNumber of this User
     */
    Optional<String> getPhoneNumber();
    
    /**
     * Returns the credits of this User. The credits field corresponds to the
     * database column db.db.user.credits.
     * 
     * @return the credits of this User
     */
    Optional<String> getCredits();
    
    /**
     * Returns the createTime of this User. The createTime field corresponds to
     * the database column db.db.user.createTime.
     * 
     * @return the createTime of this User
     */
    Optional<Timestamp> getCreateTime();
    
    /**
     * Sets the id of this User. The id field corresponds to the database column
     * db.db.user.id.
     * 
     * @param id to set of this User
     * @return   this User instance
     */
    User setId(int id);
    
    /**
     * Sets the email of this User. The email field corresponds to the database
     * column db.db.user.email.
     * 
     * @param email to set of this User
     * @return      this User instance
     */
    User setEmail(String email);
    
    /**
     * Sets the password of this User. The password field corresponds to the
     * database column db.db.user.password.
     * 
     * @param password to set of this User
     * @return         this User instance
     */
    User setPassword(String password);
    
    /**
     * Sets the phoneNumber of this User. The phoneNumber field corresponds to
     * the database column db.db.user.phoneNumber.
     * 
     * @param phoneNumber to set of this User
     * @return            this User instance
     */
    User setPhoneNumber(String phoneNumber);
    
    /**
     * Sets the credits of this User. The credits field corresponds to the
     * database column db.db.user.credits.
     * 
     * @param credits to set of this User
     * @return        this User instance
     */
    User setCredits(String credits);
    
    /**
     * Sets the createTime of this User. The createTime field corresponds to the
     * database column db.db.user.createTime.
     * 
     * @param createTime to set of this User
     * @return           this User instance
     */
    User setCreateTime(Timestamp createTime);
    
    enum Identifier implements ColumnIdentifier<User> {
        
        ID ("id"),
        EMAIL ("email"),
        PASSWORD ("password"),
        PHONE_NUMBER ("phoneNumber"),
        CREDITS ("credits"),
        CREATE_TIME ("createTime");
        
        private final String columnName;
        private final TableIdentifier<User> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName = columnName;
            this.tableIdentifier = TableIdentifier.of(getDbmsName(), getSchemaName(), getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "db";
        }
        
        @Override
        public String getSchemaName() {
            return "db";
        }
        
        @Override
        public String getTableName() {
            return "user";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<User> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}