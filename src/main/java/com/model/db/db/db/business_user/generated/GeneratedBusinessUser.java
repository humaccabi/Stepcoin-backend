package com.model.db.db.db.business_user.generated;

import com.model.db.db.db.business_user.BusinessUser;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import java.sql.Timestamp;
import java.util.Optional;
import javax.annotation.Generated;

/**
 * The generated base for the {@link
 * com.model.db.db.db.business_user.BusinessUser}-interface representing
 * entities of the {@code business_user}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface GeneratedBusinessUser {
    
    /**
     * This Field corresponds to the {@link BusinessUser} field that can be
     * obtained using the {@link BusinessUser#getId()} method.
     */
    final IntField<BusinessUser, Integer> ID = IntField.create(
        Identifier.ID,
        BusinessUser::getId,
        BusinessUser::setId,
        TypeMapper.primitive(), 
        true
    );
    /**
     * This Field corresponds to the {@link BusinessUser} field that can be
     * obtained using the {@link BusinessUser#getEmail()} method.
     */
    final StringField<BusinessUser, String> EMAIL = StringField.create(
        Identifier.EMAIL,
        o -> OptionalUtil.unwrap(o.getEmail()),
        BusinessUser::setEmail,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link BusinessUser} field that can be
     * obtained using the {@link BusinessUser#getFullName()} method.
     */
    final StringField<BusinessUser, String> FULL_NAME = StringField.create(
        Identifier.FULL_NAME,
        o -> OptionalUtil.unwrap(o.getFullName()),
        BusinessUser::setFullName,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link BusinessUser} field that can be
     * obtained using the {@link BusinessUser#getPhoneNumber()} method.
     */
    final StringField<BusinessUser, String> PHONE_NUMBER = StringField.create(
        Identifier.PHONE_NUMBER,
        o -> OptionalUtil.unwrap(o.getPhoneNumber()),
        BusinessUser::setPhoneNumber,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link BusinessUser} field that can be
     * obtained using the {@link BusinessUser#getCreateTime()} method.
     */
    final ComparableField<BusinessUser, Timestamp, Timestamp> CREATE_TIME = ComparableField.create(
        Identifier.CREATE_TIME,
        o -> OptionalUtil.unwrap(o.getCreateTime()),
        BusinessUser::setCreateTime,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link BusinessUser} field that can be
     * obtained using the {@link BusinessUser#getBalance()} method.
     */
    final StringField<BusinessUser, String> BALANCE = StringField.create(
        Identifier.BALANCE,
        o -> OptionalUtil.unwrap(o.getBalance()),
        BusinessUser::setBalance,
        TypeMapper.identity(), 
        false
    );
    
    /**
     * Returns the id of this BusinessUser. The id field corresponds to the
     * database column db.db.business_user.id.
     * 
     * @return the id of this BusinessUser
     */
    int getId();
    
    /**
     * Returns the email of this BusinessUser. The email field corresponds to
     * the database column db.db.business_user.email.
     * 
     * @return the email of this BusinessUser
     */
    Optional<String> getEmail();
    
    /**
     * Returns the fullName of this BusinessUser. The fullName field corresponds
     * to the database column db.db.business_user.fullName.
     * 
     * @return the fullName of this BusinessUser
     */
    Optional<String> getFullName();
    
    /**
     * Returns the phoneNumber of this BusinessUser. The phoneNumber field
     * corresponds to the database column db.db.business_user.phoneNumber.
     * 
     * @return the phoneNumber of this BusinessUser
     */
    Optional<String> getPhoneNumber();
    
    /**
     * Returns the createTime of this BusinessUser. The createTime field
     * corresponds to the database column db.db.business_user.createTime.
     * 
     * @return the createTime of this BusinessUser
     */
    Optional<Timestamp> getCreateTime();
    
    /**
     * Returns the balance of this BusinessUser. The balance field corresponds
     * to the database column db.db.business_user.balance.
     * 
     * @return the balance of this BusinessUser
     */
    Optional<String> getBalance();
    
    /**
     * Sets the id of this BusinessUser. The id field corresponds to the
     * database column db.db.business_user.id.
     * 
     * @param id to set of this BusinessUser
     * @return   this BusinessUser instance
     */
    BusinessUser setId(int id);
    
    /**
     * Sets the email of this BusinessUser. The email field corresponds to the
     * database column db.db.business_user.email.
     * 
     * @param email to set of this BusinessUser
     * @return      this BusinessUser instance
     */
    BusinessUser setEmail(String email);
    
    /**
     * Sets the fullName of this BusinessUser. The fullName field corresponds to
     * the database column db.db.business_user.fullName.
     * 
     * @param fullName to set of this BusinessUser
     * @return         this BusinessUser instance
     */
    BusinessUser setFullName(String fullName);
    
    /**
     * Sets the phoneNumber of this BusinessUser. The phoneNumber field
     * corresponds to the database column db.db.business_user.phoneNumber.
     * 
     * @param phoneNumber to set of this BusinessUser
     * @return            this BusinessUser instance
     */
    BusinessUser setPhoneNumber(String phoneNumber);
    
    /**
     * Sets the createTime of this BusinessUser. The createTime field
     * corresponds to the database column db.db.business_user.createTime.
     * 
     * @param createTime to set of this BusinessUser
     * @return           this BusinessUser instance
     */
    BusinessUser setCreateTime(Timestamp createTime);
    
    /**
     * Sets the balance of this BusinessUser. The balance field corresponds to
     * the database column db.db.business_user.balance.
     * 
     * @param balance to set of this BusinessUser
     * @return        this BusinessUser instance
     */
    BusinessUser setBalance(String balance);
    
    enum Identifier implements ColumnIdentifier<BusinessUser> {
        
        ID ("id"),
        EMAIL ("email"),
        FULL_NAME ("fullName"),
        PHONE_NUMBER ("phoneNumber"),
        CREATE_TIME ("createTime"),
        BALANCE ("balance");
        
        private final String columnName;
        private final TableIdentifier<BusinessUser> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName = columnName;
            this.tableIdentifier = TableIdentifier.of(getDbmsName(), getSchemaName(), getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "db";
        }
        
        @Override
        public String getSchemaName() {
            return "db";
        }
        
        @Override
        public String getTableName() {
            return "business_user";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<BusinessUser> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}