package com.model.db.db.db.users_location.generated;

import com.model.db.db.db.user.User;
import com.model.db.db.db.users_location.UsersLocation;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import javax.annotation.Generated;

/**
 * The generated base implementation of the {@link
 * com.model.db.db.db.users_location.UsersLocation}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedUsersLocationImpl implements UsersLocation {
    
    private int id;
    private String latitude;
    private String longitude;
    private String address;
    private String timestamp;
    private int userId;
    
    protected GeneratedUsersLocationImpl() {
        
    }
    
    @Override
    public int getId() {
        return id;
    }
    
    @Override
    public String getLatitude() {
        return latitude;
    }
    
    @Override
    public String getLongitude() {
        return longitude;
    }
    
    @Override
    public Optional<String> getAddress() {
        return Optional.ofNullable(address);
    }
    
    @Override
    public Optional<String> getTimestamp() {
        return Optional.ofNullable(timestamp);
    }
    
    @Override
    public int getUserId() {
        return userId;
    }
    
    @Override
    public UsersLocation setId(int id) {
        this.id = id;
        return this;
    }
    
    @Override
    public UsersLocation setLatitude(String latitude) {
        this.latitude = latitude;
        return this;
    }
    
    @Override
    public UsersLocation setLongitude(String longitude) {
        this.longitude = longitude;
        return this;
    }
    
    @Override
    public UsersLocation setAddress(String address) {
        this.address = address;
        return this;
    }
    
    @Override
    public UsersLocation setTimestamp(String timestamp) {
        this.timestamp = timestamp;
        return this;
    }
    
    @Override
    public UsersLocation setUserId(int userId) {
        this.userId = userId;
        return this;
    }
    
    @Override
    public User findUserId(Manager<User> foreignManager) {
        return foreignManager.stream().filter(User.ID.equal(getUserId())).findAny().orElse(null);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = " + Objects.toString(getId()));
        sj.add("latitude = " + Objects.toString(getLatitude()));
        sj.add("longitude = " + Objects.toString(getLongitude()));
        sj.add("address = " + Objects.toString(OptionalUtil.unwrap(getAddress())));
        sj.add("timestamp = " + Objects.toString(OptionalUtil.unwrap(getTimestamp())));
        sj.add("userId = " + Objects.toString(getUserId()));
        return "UsersLocationImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof UsersLocation)) { return false; }
        final UsersLocation thatUsersLocation = (UsersLocation)that;
        if (this.getId() != thatUsersLocation.getId()) {return false; }
        if (!Objects.equals(this.getLatitude(), thatUsersLocation.getLatitude())) {return false; }
        if (!Objects.equals(this.getLongitude(), thatUsersLocation.getLongitude())) {return false; }
        if (!Objects.equals(this.getAddress(), thatUsersLocation.getAddress())) {return false; }
        if (!Objects.equals(this.getTimestamp(), thatUsersLocation.getTimestamp())) {return false; }
        if (this.getUserId() != thatUsersLocation.getUserId()) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(getLatitude());
        hash = 31 * hash + Objects.hashCode(getLongitude());
        hash = 31 * hash + Objects.hashCode(getAddress());
        hash = 31 * hash + Objects.hashCode(getTimestamp());
        hash = 31 * hash + Integer.hashCode(getUserId());
        return hash;
    }
}