package com.model.db.db.db.location.generated;

import com.model.db.db.db.location.Location;
import com.speedment.runtime.core.util.OptionalUtil;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import javax.annotation.Generated;

/**
 * The generated base implementation of the {@link
 * com.model.db.db.db.location.Location}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedLocationImpl implements Location {
    
    private int id;
    private String latitude;
    private String longitude;
    private String address;
    
    protected GeneratedLocationImpl() {
        
    }
    
    @Override
    public int getId() {
        return id;
    }
    
    @Override
    public String getLatitude() {
        return latitude;
    }
    
    @Override
    public String getLongitude() {
        return longitude;
    }
    
    @Override
    public Optional<String> getAddress() {
        return Optional.ofNullable(address);
    }
    
    @Override
    public Location setId(int id) {
        this.id = id;
        return this;
    }
    
    @Override
    public Location setLatitude(String latitude) {
        this.latitude = latitude;
        return this;
    }
    
    @Override
    public Location setLongitude(String longitude) {
        this.longitude = longitude;
        return this;
    }
    
    @Override
    public Location setAddress(String address) {
        this.address = address;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = " + Objects.toString(getId()));
        sj.add("latitude = " + Objects.toString(getLatitude()));
        sj.add("longitude = " + Objects.toString(getLongitude()));
        sj.add("address = " + Objects.toString(OptionalUtil.unwrap(getAddress())));
        return "LocationImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Location)) { return false; }
        final Location thatLocation = (Location)that;
        if (this.getId() != thatLocation.getId()) {return false; }
        if (!Objects.equals(this.getLatitude(), thatLocation.getLatitude())) {return false; }
        if (!Objects.equals(this.getLongitude(), thatLocation.getLongitude())) {return false; }
        if (!Objects.equals(this.getAddress(), thatLocation.getAddress())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(getLatitude());
        hash = 31 * hash + Objects.hashCode(getLongitude());
        hash = 31 * hash + Objects.hashCode(getAddress());
        return hash;
    }
}