package com.model.db.db.db.users_location.generated;

import com.model.db.db.db.user.User;
import com.model.db.db.db.users_location.UsersLocation;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.IntForeignKeyField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import java.util.Optional;
import javax.annotation.Generated;

/**
 * The generated base for the {@link
 * com.model.db.db.db.users_location.UsersLocation}-interface representing
 * entities of the {@code users_location}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface GeneratedUsersLocation {
    
    /**
     * This Field corresponds to the {@link UsersLocation} field that can be
     * obtained using the {@link UsersLocation#getId()} method.
     */
    final IntField<UsersLocation, Integer> ID = IntField.create(
        Identifier.ID,
        UsersLocation::getId,
        UsersLocation::setId,
        TypeMapper.primitive(), 
        false
    );
    /**
     * This Field corresponds to the {@link UsersLocation} field that can be
     * obtained using the {@link UsersLocation#getLatitude()} method.
     */
    final StringField<UsersLocation, String> LATITUDE = StringField.create(
        Identifier.LATITUDE,
        UsersLocation::getLatitude,
        UsersLocation::setLatitude,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link UsersLocation} field that can be
     * obtained using the {@link UsersLocation#getLongitude()} method.
     */
    final StringField<UsersLocation, String> LONGITUDE = StringField.create(
        Identifier.LONGITUDE,
        UsersLocation::getLongitude,
        UsersLocation::setLongitude,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link UsersLocation} field that can be
     * obtained using the {@link UsersLocation#getAddress()} method.
     */
    final StringField<UsersLocation, String> ADDRESS = StringField.create(
        Identifier.ADDRESS,
        o -> OptionalUtil.unwrap(o.getAddress()),
        UsersLocation::setAddress,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link UsersLocation} field that can be
     * obtained using the {@link UsersLocation#getTimestamp()} method.
     */
    final StringField<UsersLocation, String> TIMESTAMP = StringField.create(
        Identifier.TIMESTAMP,
        o -> OptionalUtil.unwrap(o.getTimestamp()),
        UsersLocation::setTimestamp,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link UsersLocation} field that can be
     * obtained using the {@link UsersLocation#getUserId()} method.
     */
    final IntForeignKeyField<UsersLocation, Integer, User> USER_ID = IntForeignKeyField.create(
        Identifier.USER_ID,
        UsersLocation::getUserId,
        UsersLocation::setUserId,
        User.ID,
        TypeMapper.primitive(), 
        false
    );
    
    /**
     * Returns the id of this UsersLocation. The id field corresponds to the
     * database column db.db.users_location.id.
     * 
     * @return the id of this UsersLocation
     */
    int getId();
    
    /**
     * Returns the latitude of this UsersLocation. The latitude field
     * corresponds to the database column db.db.users_location.latitude.
     * 
     * @return the latitude of this UsersLocation
     */
    String getLatitude();
    
    /**
     * Returns the longitude of this UsersLocation. The longitude field
     * corresponds to the database column db.db.users_location.longitude.
     * 
     * @return the longitude of this UsersLocation
     */
    String getLongitude();
    
    /**
     * Returns the address of this UsersLocation. The address field corresponds
     * to the database column db.db.users_location.address.
     * 
     * @return the address of this UsersLocation
     */
    Optional<String> getAddress();
    
    /**
     * Returns the timestamp of this UsersLocation. The timestamp field
     * corresponds to the database column db.db.users_location.timestamp.
     * 
     * @return the timestamp of this UsersLocation
     */
    Optional<String> getTimestamp();
    
    /**
     * Returns the userId of this UsersLocation. The userId field corresponds to
     * the database column db.db.users_location.user_id.
     * 
     * @return the userId of this UsersLocation
     */
    int getUserId();
    
    /**
     * Sets the id of this UsersLocation. The id field corresponds to the
     * database column db.db.users_location.id.
     * 
     * @param id to set of this UsersLocation
     * @return   this UsersLocation instance
     */
    UsersLocation setId(int id);
    
    /**
     * Sets the latitude of this UsersLocation. The latitude field corresponds
     * to the database column db.db.users_location.latitude.
     * 
     * @param latitude to set of this UsersLocation
     * @return         this UsersLocation instance
     */
    UsersLocation setLatitude(String latitude);
    
    /**
     * Sets the longitude of this UsersLocation. The longitude field corresponds
     * to the database column db.db.users_location.longitude.
     * 
     * @param longitude to set of this UsersLocation
     * @return          this UsersLocation instance
     */
    UsersLocation setLongitude(String longitude);
    
    /**
     * Sets the address of this UsersLocation. The address field corresponds to
     * the database column db.db.users_location.address.
     * 
     * @param address to set of this UsersLocation
     * @return        this UsersLocation instance
     */
    UsersLocation setAddress(String address);
    
    /**
     * Sets the timestamp of this UsersLocation. The timestamp field corresponds
     * to the database column db.db.users_location.timestamp.
     * 
     * @param timestamp to set of this UsersLocation
     * @return          this UsersLocation instance
     */
    UsersLocation setTimestamp(String timestamp);
    
    /**
     * Sets the userId of this UsersLocation. The userId field corresponds to
     * the database column db.db.users_location.user_id.
     * 
     * @param userId to set of this UsersLocation
     * @return       this UsersLocation instance
     */
    UsersLocation setUserId(int userId);
    
    /**
     * Queries the specified manager for the referenced User. If no such User
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    User findUserId(Manager<User> foreignManager);
    
    enum Identifier implements ColumnIdentifier<UsersLocation> {
        
        ID ("id"),
        LATITUDE ("latitude"),
        LONGITUDE ("longitude"),
        ADDRESS ("address"),
        TIMESTAMP ("timestamp"),
        USER_ID ("user_id");
        
        private final String columnName;
        private final TableIdentifier<UsersLocation> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName = columnName;
            this.tableIdentifier = TableIdentifier.of(getDbmsName(), getSchemaName(), getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "db";
        }
        
        @Override
        public String getSchemaName() {
            return "db";
        }
        
        @Override
        public String getTableName() {
            return "users_location";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<UsersLocation> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}